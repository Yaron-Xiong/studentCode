package com.yaronxiong.algorithms.Stormzhang.array.search;

/**
 * 1011. 在 D 天内送达包裹的能力:https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/
 * <p>
 * 传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。
 * <p>
 * 传送带上的第 i个包裹的重量为weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。
 * <p>
 * 返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：weights = [1,2,3,4,5,6,7,8,9,10], D = 5
 * 输出：15
 * 解释：
 * 船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
 * 第 1 天：1, 2, 3, 4, 5
 * 第 2 天：6, 7
 * 第 3 天：8
 * 第 4 天：9
 * 第 5 天：10
 * <p>
 * 请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。
 * 示例 2：
 * <p>
 * 输入：weights = [3,2,2,4,1,4], D = 3
 * 输出：6
 * 解释：
 * 船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：
 * 第 1 天：3, 2
 * 第 2 天：2, 4
 * 第 3 天：1, 4
 * 示例 3：
 * <p>
 * 输入：weights = [1,2,3,1,1], D = 4
 * 输出：3
 * 解释：
 * 第 1 天：1
 * 第 2 天：2
 * 第 3 天：3
 * 第 4 天：1, 1
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= D <= weights.length <= 5 * 104
 * 1 <= weights[i] <= 500
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class ShipWithinDays {
	public static void main(String[] args) {
		ShipWithinDays shipWithinDays = new ShipWithinDays();
		int i = shipWithinDays.shipWithinDays(new int[]{}, 1);
		int i2 = shipWithinDays.f(new int[]{3, 2, 2, 4, 1, 4}, 6);
		System.out.println(i);
	}

	public int shipWithinDays(int[] weights, int days) {
		int left = 0;
		int right = 0;
		for (int weight : weights) {
			left = Math.max(left, weight);
			right += weight;
		}
		while (left <= right) {
			int mid = (left + right) >> 1;
			int f = f(weights, mid);
			if (f > days) {
				left = mid + 1;
			} else {
				right = mid - 1;
			}
		}
		return left;
	}

	private int f(int[] weights, int x) {
		int days = 1;
		int cap = 0;
		for (int weight : weights) {
			if (cap + weight > x) {
				days++;
				cap = 0;
			}
			cap += weight;
		}
		return days;
	}
}
