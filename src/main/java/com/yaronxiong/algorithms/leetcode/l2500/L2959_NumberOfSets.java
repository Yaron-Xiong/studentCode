package com.yaronxiong.algorithms.leetcode.l2500;

/**
 * 2959. 关闭分部的可行集合数目
 * 算术评级: 6
 * 第 119 场双周赛
 * Q4
 * 2077
 * 相关标签
 * 相关企业
 * 提示
 * 一个公司在全国有 n 个分部，它们之间有的有道路连接。一开始，所有分部通过这些道路两两之间互相可以到达。
 * <p>
 * 公司意识到在分部之间旅行花费了太多时间，所以它们决定关闭一些分部（也可能不关闭任何分部），同时保证剩下的分部之间两两互相可以到达且最远距离不超过 maxDistance 。
 * <p>
 * 两个分部之间的 距离 是通过道路长度之和的 最小值 。
 * <p>
 * 给你整数 n ，maxDistance 和下标从 0 开始的二维整数数组 roads ，其中 roads[i] = [ui, vi, wi] 表示一条从 ui 到 vi 长度为 wi的 无向 道路。
 * <p>
 * 请你返回关闭分部的可行方案数目，满足每个方案里剩余分部之间的最远距离不超过 maxDistance。
 * <p>
 * 注意，关闭一个分部后，与之相连的所有道路不可通行。
 * <p>
 * 注意，两个分部之间可能会有多条道路。
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]
 * 输出：5
 * 解释：可行的关闭分部方案有：
 * - 关闭分部集合 [2] ，剩余分部为 [0,1] ，它们之间的距离为 2 。
 * - 关闭分部集合 [0,1] ，剩余分部为 [2] 。
 * - 关闭分部集合 [1,2] ，剩余分部为 [0] 。
 * - 关闭分部集合 [0,2] ，剩余分部为 [1] 。
 * - 关闭分部集合 [0,1,2] ，关闭后没有剩余分部。
 * 总共有 5 种可行的关闭方案。
 * 示例 2：
 * <p>
 * 输入：n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]
 * 输出：7
 * 解释：可行的关闭分部方案有：
 * - 关闭分部集合 [] ，剩余分部为 [0,1,2] ，它们之间的最远距离为 4 。
 * - 关闭分部集合 [0] ，剩余分部为 [1,2] ，它们之间的距离为 2 。
 * - 关闭分部集合 [1] ，剩余分部为 [0,2] ，它们之间的距离为 2 。
 * - 关闭分部集合 [0,1] ，剩余分部为 [2] 。
 * - 关闭分部集合 [1,2] ，剩余分部为 [0] 。
 * - 关闭分部集合 [0,2] ，剩余分部为 [1] 。
 * - 关闭分部集合 [0,1,2] ，关闭后没有剩余分部。
 * 总共有 7 种可行的关闭方案。
 * 示例 3：
 * <p>
 * 输入：n = 1, maxDistance = 10, roads = []
 * 输出：2
 * 解释：可行的关闭分部方案有：
 * - 关闭分部集合 [] ，剩余分部为 [0] 。
 * - 关闭分部集合 [0] ，关闭后没有剩余分部。
 * 总共有 2 种可行的关闭方案。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= n <= 10
 * 1 <= maxDistance <= 105
 * 0 <= roads.length <= 1000
 * roads[i].length == 3
 * 0 <= ui, vi <= n - 1
 * ui != vi
 * 1 <= wi <= 1000
 * 一开始所有分部之间通过道路互相可以到达。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：<a href="https://leetcode.cn/problems/number-of-possible-sets-of-closing-branches/description/?envType=daily-question&envId=2024-07-17">...</a>
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class L2959_NumberOfSets {
    public int numberOfSets(int n, int maxDistance, int[][] roads) {
        int[][] graph = new int[n][n];
        for (int[] road : roads) {
            graph[road[0]][road[1]] = road[2];
            graph[road[1]][road[0]] = road[2];
        }
        //计算任意两点的距离
        return 1;
    }
}
