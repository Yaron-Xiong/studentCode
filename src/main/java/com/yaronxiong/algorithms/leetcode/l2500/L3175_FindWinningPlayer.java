package com.yaronxiong.algorithms.leetcode.l2500;

/**
 * 3175. 找到连续赢 K 场比赛的第一位玩家
 * 算术评级: 5
 * 第 132 场双周赛
 * Q2
 * 同步题目状态
 * <p>
 * 1488
 * 相关标签
 * 相关企业
 * 提示
 * 有 n 位玩家在进行比赛，玩家编号依次为 0 到 n - 1 。
 * <p>
 * 给你一个长度为 n 的整数数组 skills 和一个 正 整数 k ，其中 skills[i] 是第 i 位玩家的技能等级。skills 中所有整数 互不相同 。
 * <p>
 * 所有玩家从编号 0 到 n - 1 排成一列。
 * <p>
 * 比赛进行方式如下：
 * <p>
 * 队列中最前面两名玩家进行一场比赛，技能等级 更高 的玩家胜出。
 * 比赛后，获胜者保持在队列的开头，而失败者排到队列的末尾。
 * 这个比赛的赢家是 第一位连续 赢下 k 场比赛的玩家。
 * <p>
 * 请你返回这个比赛的赢家编号。
 * <p>
 * 示例 1：
 * <p>
 * 输入：skills = [4,2,6,3,9], k = 2
 * <p>
 * 输出：2
 * <p>
 * 解释：
 * <p>
 * 一开始，队列里的玩家为 [0,1,2,3,4] 。比赛过程如下：
 * <p>
 * 玩家 0 和 1 进行一场比赛，玩家 0 的技能等级高于玩家 1 ，玩家 0 胜出，队列变为 [0,2,3,4,1] 。
 * 玩家 0 和 2 进行一场比赛，玩家 2 的技能等级高于玩家 0 ，玩家 2 胜出，队列变为 [2,3,4,1,0] 。
 * 玩家 2 和 3 进行一场比赛，玩家 2 的技能等级高于玩家 3 ，玩家 2 胜出，队列变为 [2,4,1,0,3] 。
 * 玩家 2 连续赢了 k = 2 场比赛，所以赢家是玩家 2 。
 * <p>
 * 示例 2：
 * <p>
 * 输入：skills = [2,5,4], k = 3
 * <p>
 * 输出：1
 * <p>
 * 解释：
 * <p>
 * 一开始，队列里的玩家为 [0,1,2] 。比赛过程如下：
 * <p>
 * 玩家 0 和 1 进行一场比赛，玩家 1 的技能等级高于玩家 0 ，玩家 1 胜出，队列变为 [1,2,0] 。
 * 玩家 1 和 2 进行一场比赛，玩家 1 的技能等级高于玩家 2 ，玩家 1 胜出，队列变为 [1,0,2] 。
 * 玩家 1 和 0 进行一场比赛，玩家 1 的技能等级高于玩家 0 ，玩家 1 胜出，队列变为 [1,2,0] 。
 * 玩家 1 连续赢了 k = 3 场比赛，所以赢家是玩家 1 。
 * <p>
 * 提示：
 * <p>
 * n == skills.length
 * 2 <= n <= 105
 * 1 <= k <= 109
 * 1 <= skills[i] <= 106
 * skills 中的整数互不相同。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：<a href="https://leetcode.cn/problems/find-the-first-player-to-win-k-games-in-a-row/description/?envType=daily-question&envId=2024-10-24">...</a>
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class L3175_FindWinningPlayer {
    public int findWinningPlayer(int[] skills, int k) {
        //现在的擂主
        int maxI = 0;
        //擂主赢的场次
        int win = 0;
        for (int i = 1; i < skills.length && win < k; i++) {
            if (skills[i] > skills[maxI]) {
                maxI = i;
                win = 0;
            }
            win++;
        }
        return maxI;
    }
}
