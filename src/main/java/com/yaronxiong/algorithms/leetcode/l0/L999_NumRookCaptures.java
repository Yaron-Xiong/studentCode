package com.yaronxiong.algorithms.leetcode.l0;

/**
 * 999. 可以被一步捕获的棋子数
 * 算术评级: 2
 * 第 125 场周赛
 * Q2
 * 同步题目状态
 * <p>
 * 1318
 * 相关标签
 * 相关企业
 * 给定一个 8 x 8 的棋盘，只有一个 白色的车，用字符 'R' 表示。棋盘上还可能存在白色的象 'B' 以及黑色的卒 'p'。空方块用字符 '.' 表示。
 * <p>
 * 车可以按水平或竖直方向（上，下，左，右）移动任意个方格直到它遇到另一个棋子或棋盘的边界。如果它能够在一次移动中移动到棋子的方格，则能够 吃掉 棋子。
 * <p>
 * 注意：车不能穿过其它棋子，比如象和卒。这意味着如果有其它棋子挡住了路径，车就不能够吃掉棋子。
 * <p>
 * 返回白车将能 吃掉 的 卒的数量。
 * <p>
 * 示例 1：
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 在本例中，车能够吃掉所有的卒。
 * 示例 2：
 * <p>
 * <p>
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：0
 * 解释：
 * 象阻止了车吃掉任何卒。
 * 示例 3：
 * <p>
 * <p>
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 车可以吃掉位置 b5，d6 和 f5 的卒。
 * <p>
 * <p>
 * 提示：
 * <p>
 * board.length == 8
 * board[i].length == 8
 * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
 * 只有一个格子上存在 board[i][j] == 'R'
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：<a href="https://leetcode.cn/problems/available-captures-for-rook/description/?envType=daily-question&envId=2024-12-06">...</a>
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class L999_NumRookCaptures {
    public static void main(String[] args) {
        L999_NumRookCaptures l999NumRookCaptures = new L999_NumRookCaptures();
        char[][] chars = new char[][]{{'.', '.', '.', '.', '.', '.', '.', '.'}, {'.', '.', '.', 'p', '.', '.', '.', '.'}, {'.', '.', '.', 'R', '.', '.', '.', 'p'}, {'.', '.', '.', '.', '.', '.', '.', '.'}, {'.', '.', '.', '.', '.', '.', '.', '.'}, {'.', '.', '.', 'p', '.', '.', '.', '.'}, {'.', '.', '.', '.', '.', '.', '.', '.'}, {'.', '.', '.', '.', '.', '.', '.', '.'}};
        System.out.println(l999NumRookCaptures.numRookCaptures(chars));
    }
    public int numRookCaptures(char[][] board) {
        int ans = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != 'R') {
                    continue;
                }
                //向上遍历
                for (int z = i - 1; z >= 0; z--) {
                    if (board[z][j] == 'B') {
                        break;
                    }
                    if (board[z][j] == 'p') {
                        ans++;
                        break;
                    }
                }
                //向左遍历
                for (int z = j - 1; z >= 0; z--) {
                    if (board[i][z] == 'B') {
                        break;
                    }
                    if (board[i][z] == 'p') {
                        ans++;
                        break;
                    }
                }
                //向右遍历
                for (int z = j + 1; z < board[i].length; z++) {
                    if (board[i][z] == 'B') {
                        break;
                    }
                    if (board[i][z] == 'p') {
                        ans++;
                        break;
                    }
                }
                //向下遍历
                for (int z = i + 1; z < board.length; z++) {
                    if (board[z][j] == 'B') {
                        break;
                    }
                    if (board[z][j] == 'p') {
                        ans++;
                        break;
                    }
                }
            }
        }
        return ans;
    }
}
